#!/bin/bash

RED="31"
GREEN="32"
YELLOW="33"
BOLDGREEN="\033[1;${GREEN}m"
BOLDRED="\033[1;${RED}m"
BOLDYELLOW="\033[1;${YELLOW}m"
ENDCOLOR="\033[0m"

ERRORS=()

# helper functions
progress_message() {
  printf "${BOLDGREEN}%s${ENDCOLOR}\n" "$1"
}

warning_message() {
  printf "${BOLDYELLOW}%s${ENDCOLOR}\n" "$1"
}

error_message() {
  printf "${BOLDRED}%s${ENDCOLOR}\n" "$1" >&2
}

message() {
  printf "${BOLDGREEN}%s${ENDCOLOR}\n\n" "$1"
}

execute_command_raw() {
  local cmd="$1" msg="$2"
  trap 'was_interrupted=1' INT

  progress_message "$msg..."
  printf "\n"

  eval "$cmd"
  status=$?
  trap - INT

  printf "\n"
  if (( was_interrupted )); then
    warning_message "$msg...Interrupted!"
    exit 130
  elif (( status == 0 )); then
    progress_message "$msg...Done!"
    printf "\n\n"
  else
    error_message "$msg...Fail!"

    printf "Exit status: %s\n" "$status"
    exit 1
  fi
}

execute_command() {
  local cmd="$1" msg="$2" output
  trap 'was_interrupted=1' INT
  progress_message "$msg..."

  if output=$(eval "$cmd" 2>&1); then
    status=0
  else
    status=$?
  fi

  trap - INT

  if (( was_interrupted )); then
    warning_message "$msg...Interrupted!"
    exit 130
  elif (( status == 0 )); then
    progress_message "$msg...Done!"
    printf "\n\n"
  else
    error_message "$msg...Fail!"

    printf "\n"
    error_message "The following errors occurred:"
    printf "%b" "\n${output}\n\n"
    exit 1
  fi
}

# Install Xcode Command Line Tools if not already installed
if ! xcode-select -p >/dev/null 2>&1; then
  execute_command "xcode-select --install" \
    "> Open the GUI prompt to install Xcode Command Line Tools"
  message "Please finish installing the Xcode Command Line Tools, then re-run this script."
  exit 1
else
  message "> Xcode Command Line Tools already installed."
fi

# Check for Homebrew to be present, install if it's missing
if test ! $(which brew); then
  message "> Installing homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Install Homebrew packages
execute_command_raw \
  "brew bundle" \
  "> Instaling Homebrew packages"

# Setup login shell from homebrew
BREW_PREFIX="$(brew --prefix)"
NEW_SHELL="$BREW_PREFIX/bin/bash"

execute_command \
  "grep -Fxq $NEW_SHELL /etc/shells || echo $NEW_SHELL | sudo tee -a /etc/shells" \
  "> Adding Homebrew bash to /etc/shells"

execute_command \
  "chsh -s $NEW_SHELL" \
  "> Changing login shell to Homebrew bash"

# Check for tmux/tpm to be present, install if it's missing
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
  execute_command "git clone https://github.com/tmux-plugins/tpm ${HOME}/.tmux/plugins/tpm" \
    "> Installing Tmux Package Manager"
fi
